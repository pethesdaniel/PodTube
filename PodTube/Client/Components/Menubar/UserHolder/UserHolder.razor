@using PodTube.Client.Components.Users.UserDisplay
@using PodTube.Client.Services;
@using PodTube.Shared.Models.DTO;
@inject HttpClient httpClient;
@inject NavigationManager Navigator;

@if (!IsLoggedIn) {
    <MudButton Variant="Variant.Text" Color="Color.Inherit" OnClick="OnLogin">Login</MudButton>
} else {
    <MudStack Row>
        <UserDisplay User="User"></UserDisplay>
        <MudIconButton Color="Color.Inherit" Icon="@Icons.Material.Filled.Logout" OnClick="OnLogout" aria-label="logout"></MudIconButton>
    </MudStack>
}


@code {
    [Parameter] public UserDto? User { get; set; } = null;
    [CascadingParameter] public bool IsLoggedIn { get; set; } = false;

    private UserApiClient client = null!;

    protected override async Task OnInitializedAsync() {
        client = new UserApiClient(Navigator.BaseUri, httpClient);

        await base.OnInitializedAsync();
    }

    private void OnLogin() {
        Navigator.NavigateTo("/login");
    }

    private void OnLogout() {
        Navigator.NavigateTo("/logout");
    }

    protected override async Task OnParametersSetAsync() {
        if (IsLoggedIn && User == null) {
            User = await client.GetUserSelfAsync();
        }
        await base.OnParametersSetAsync();
    }
}
