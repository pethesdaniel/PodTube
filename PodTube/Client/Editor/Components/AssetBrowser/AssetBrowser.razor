@using MimeDetective;
@using PodTube.Shared.Models.Editor;
@using Radzen.Blazor.Rendering;
@inject HttpClient client

<RadzenCard Style="min-height: 300px">
    <RadzenRow AlignItems="Radzen.AlignItems.Center">
        <RadzenText TextStyle="TextStyle.Caption">Asset Browser</RadzenText>
        <RadzenButton @ref=AddButton Click="@(args => AddPopup.ToggleAsync(AddButton.Element))" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-10"/>
    </RadzenRow>
    <RadzenRow class="m-2">
        @foreach (var asset in Assets) {
            <RadzenCard class="p-2 rz-text-align-center">
                <PodTube.Client.Editor.Components.AssetDisplay.AssetDisplay Value="asset"></PodTube.Client.Editor.Components.AssetDisplay.AssetDisplay>
                <RadzenButton Click=@(args => OnAddToTimeline(asset)) Icon="view_timeline" Text="Add" ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-10"/>
            </RadzenCard>
        }
    </RadzenRow>
</RadzenCard>

<Popup @ref=AddPopup Style="display:none;position:absolute;height:300px;width:600px;">
    <PodTube.Client.Editor.Components.AssetBrowser.FileUpload.FileUpload OnUploaded=@OnCreateNewItem></PodTube.Client.Editor.Components.AssetBrowser.FileUpload.FileUpload>
</Popup>

@code {
    [Parameter] public EventCallback<Asset> AddAssetToTimeline { get; set; }

    private List<Asset> Assets { get; set; } = new List<Asset>();
    //private bool NewItemIsAudio { get; set; } = false;

    private Popup AddPopup;
    RadzenButton AddButton;

    public async Task OnCreateNewItem(Asset asset) {
        Assets.Add(asset);
        await AddPopup.CloseAsync();
    }

    public void OnAddToTimeline(Asset asset) {
        AddAssetToTimeline.InvokeAsync(asset);
    }

}
