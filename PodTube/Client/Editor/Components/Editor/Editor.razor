@using PodTube.Shared.Models.DTO;
@using PodTube.Shared.Models.Editor;
@inject NavigationManager navigator;
@inject HttpClient client;
@inject DialogService dialogService
@inject RestHelper RestHelper

<RadzenComponents />

<RadzenRow>
    <RadzenColumn>
        <PodTube.Client.Editor.Components.AssetBrowser.AssetBrowser AddAssetToTimeline=AddAssetToTimeline DeleteAsset="DeleteAsset"></PodTube.Client.Editor.Components.AssetBrowser.AssetBrowser>
    </RadzenColumn>
    <RadzenColumn>
        <RadzenCard Style="min-height: 300px; display: flex; flex-direction: column; justify-content: space-between;">
            <RadzenText TextStyle="TextStyle.Caption">Preview</RadzenText>
            <div>
                <PodTube.Client.Components.Videos.VideoPlayer.PodTubeVideoPlayer Video="VideoDto"></PodTube.Client.Components.Videos.VideoPlayer.PodTubeVideoPlayer>
                <PodTube.Client.Editor.Components.UploadPodtube.UploadPodtube timeline="Timeline"></PodTube.Client.Editor.Components.UploadPodtube.UploadPodtube>
            </div>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>
<RadzenRow>
    <RadzenColumn Size="12">
        <PodTube.Client.Editor.Components.Timeline.Timeline Value="Timeline" OnTimelineChanged="TimelineChanged"></PodTube.Client.Editor.Components.Timeline.Timeline>
    </RadzenColumn>
</RadzenRow>

@code {
    private TimelineModel Timeline { get; set; } = new TimelineModel();
    private VideoDto VideoDto { get; set; } = new VideoDto();

    public void AddAssetToTimeline(Asset asset) {
        if (asset.IsAudio) {
            Timeline.AudioItems.Add(new TimelineItem {
                    Asset = asset,
                    Duration = 100
                });
        } else {
            Timeline.VisualItems.Add(new TimelineItem {
                    Asset = asset,
                    Duration = 100
            });
        }
        TimelineChanged();
    }

    public void TimelineChanged() {
        VideoDto = ToVideoDto();
    }

    public VideoDto ToVideoDto() {
        var frames = new List<FrameDto>();
        foreach (var item in Timeline.VisualItems) {
            frames.Add(new FrameDto {
                    Url = item.Asset.Url,
                    TimestampStart = frames.Count > 0 ? frames[frames.Count - 1].TimestampEnd : 0,
                    TimestampEnd = frames.Count > 0 ? frames[frames.Count - 1].TimestampEnd + (int)(item.Duration) : (int)item.Duration,
                });
        }
        return new VideoDto {
                Id = 0,
                Name = "Preview",
                Audios = Timeline.AudioItems.Select(ai => ai.Asset.Url).ToList(),
                Frames = frames
            };
    }

    public async Task DeleteAsset(Asset asset) {
        if(
            Timeline.VisualItems.All(timelineAsset => timelineAsset.Asset.FileId != asset.FileId) &&
            Timeline.AudioItems.All(timelineAsset => timelineAsset.Asset.FileId != asset.FileId)
        ) {
            var fileApiClient = new FileApiClient(navigator.BaseUri, client);
            asset.Deleted = await RestHelper.MakeSafeRestCall<bool>(async () => { await fileApiClient.DeleteFileAsync(asset.FileId); return true; }, "Asset deleted!");

        } else {
            await dialogService.OpenAsync("Can't delete an item that's on the timeline!",
            ds => 
            @<RadzenStack>
                <RadzenText>Remove it from the timeline first.</RadzenText>
            </RadzenStack>,
            new DialogOptions() {
                ShowTitle = true,
                Style = "min-height:auto;min-width:auto;width:auto"
            }
            );
        }
    }
}
