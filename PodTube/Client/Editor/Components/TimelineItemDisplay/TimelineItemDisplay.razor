@using PodTube.Shared.Models.Editor;
@using Radzen.Blazor.Rendering;
<div>
    <RadzenCard class="@{"p-0 rz-text-align-center timeline-item " + GetColorClass() + " " + GetHeightClass()}" Style=@GetStyle()>
        @if (Value.Asset.IsAudio) {
            <PodTube.Client.Editor.Components.Waveform.WaveformDisplay Url="@Value.Asset.Url" OnWaveformLoaded=OnWaveformLoaded style="width: 100%; height: 128px"></PodTube.Client.Editor.Components.Waveform.WaveformDisplay>
        }
        <RadzenStack Orientation="Orientation.Horizontal">
            @if (!Value.Asset.IsAudio) {
                <RadzenImage Path="@Value.Asset.Url" class="timeline-item-height-image" />
            }
            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
                <RadzenStack JustifyContent="JustifyContent.Start" Gap="0">
                    <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Start"><b>@(Value.Asset.Name)</b></RadzenText>
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Duration</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1" class="rz-display-flex rz-mt-0"><b>@(GetDuration(Value.Duration))</b></RadzenText>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal">
                    @if (DisplayLeftSwap) {
                        <RadzenButton Click=@(args => OnLeftSwap.InvokeAsync(Value)) Icon="fast_rewind" ButtonStyle="ButtonStyle.Primary" />
                    }
                    @if (DisplayChangeDuration) {
                        <RadzenButton @ref=IncreaseButtonRef Click=@(args => IncreasePopup.ToggleAsync(IncreaseButtonRef.Element)) Icon="add" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton @ref=DecreaseButtonRef Click=@(args => DecreasePopup.ToggleAsync(DecreaseButtonRef.Element)) Icon="remove" ButtonStyle="ButtonStyle.Primary" />
                    }
                    @if (DisplayRightSwap) {
                        <RadzenButton Click=@(args => OnRightSwap.InvokeAsync(Value)) Icon="fast_forward" ButtonStyle="ButtonStyle.Primary" />
                    }
                    <RadzenButton Click=@(args => OnDelete.InvokeAsync(Value)) Icon="delete" ButtonStyle="ButtonStyle.Primary" />
                </RadzenStack>
            </RadzenStack>

        </RadzenStack>

    </RadzenCard>
</div>


<Popup @ref=IncreasePopup Lazy=true Style="display:none;position:absolute;background-color:var(--rz-panel-background-color);">
    <PodTube.Client.Editor.Components.TimelineItemDisplay.DurationPopup.DurationPopup OnDone="OnIncreaseDuration" Operation="Add time" />
</Popup>

<Popup @ref=DecreasePopup Lazy=true Style="display:none;position:absolute;background-color:var(--rz-panel-background-color);">
    <PodTube.Client.Editor.Components.TimelineItemDisplay.DurationPopup.DurationPopup OnDone="OnDecreaseDuration" Operation="Remove time"/>
</Popup>



@code {
    [Parameter] public TimelineItem Value { get; set; }
    [Parameter] public double TimelineScale { get; set; }
    [Parameter] public bool DisplayLeftSwap { get; set; } = false;
    [Parameter] public bool DisplayRightSwap { get; set; } = false;
    [Parameter] public bool DisplayChangeDuration { get; set; } = false;
    [Parameter] public EventCallback<TimelineItem> OnLeftSwap { get; set; } = new EventCallback<TimelineItem>();
    [Parameter] public EventCallback<TimelineItem> OnRightSwap { get; set; } = new EventCallback<TimelineItem>();
    [Parameter] public EventCallback<TimelineItem> OnDelete { get; set; } = new EventCallback<TimelineItem>();
    [Parameter] public EventCallback OnChanged { get; set; } = new EventCallback();


    private Popup IncreasePopup;
    private Popup DecreasePopup;
    private RadzenButton IncreaseButtonRef;
    private RadzenButton DecreaseButtonRef;

    public string GetDuration(double value) {
        return TimeSpan.FromSeconds(value).ToString("c");
    }

    public string GetStyle() {
        return $"width: {TimelineScale * Value.Duration}px;";
    }

    public string GetColorClass() {
        return Value.Asset.IsAudio ? "rz-background-color-warning" : "rz-background-color-info";
    }

    public string GetHeightClass() {
        return Value.Asset.IsAudio ? "timeline-item-height-audio" : "timeline-item-height-image";
    }

    public void OnIncreaseDuration(double value) {
        Value.Duration += value;
        IncreasePopup.CloseAsync();
        OnChanged.InvokeAsync();
    }

    public void OnDecreaseDuration(double value) {
        Value.Duration -= value;
        if(Value.Duration < 0) {
            Value.Duration = 0;
        }
        DecreasePopup.CloseAsync();
        OnChanged.InvokeAsync();
    }

    public void SetDuration(double value) {
        Value.Duration = value;
        OnChanged.InvokeAsync();
    }

    private async Task OnWaveformLoaded(double value) {
        SetDuration(value);
    }
}
