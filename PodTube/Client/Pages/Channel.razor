@page "/channel/{channelId}"
@using PodTube.Shared.Models.DTO;
@using PodTube.Client.Components.VideoList
@using PodTube.Client.Rest;
@inject NavigationManager Navigator
@inject HttpClient httpClient

@if (channel == null) {
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
} else {
    <MudCard Outlined="true">
        <MudCardHeader>
            <MudStack Row=true AlignItems="AlignItems.Center">
                <MudImage Width="500" Src="@channel.Thumbnail"></MudImage>
                <MudStack>
                    <MudText Typo="Typo.h4">@channel.Name</MudText>
                    <MudText Typo="Typo.h5">@channel.Description</MudText>
                    <MudStack Row=true AlignItems="AlignItems.Center">
                        <MudAvatar>
                            <MudImage Src="@channel.Owner.Picture"></MudImage>
                        </MudAvatar>
                        <MudText Typo="Typo.body2">@channel.Owner.Name</MudText>
                    </MudStack>
                </MudStack>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <MudStack>
                <VideoList Videos="Videos" />
                <div class="d-flex flex-grow-1 gap-4 justify-space-between">
                    <MudPaper Width="100px" Elevation="0" />
                    <MudPagination Rectangular="true" SelectedChanged="SelectedPageChanged" Variant="Variant.Text" Count="@Total" Selected="@PageNumber" />
                    <MudPaper Width="100px" Elevation="0">
                        <MudNumericField Class="pa-1" Value="Limit" ValueChanged="@((int e)=>LimitChanged(e))" Label="Limit" Variant="Variant.Text" Min="0" Max="10" />
                    </MudPaper>
                </div>
            </MudStack>
        </MudCardContent>
    </MudCard>
}


@code {
    [Parameter]
    public string channelId { get; set; }
    private ChannelApiClient? client;

    private ChannelDto? channel;
    private List<VideoDto> Videos;

    public int PageNumber { get; set; } = 1;
    public int Total { get; set; } = 0;
    public int Limit { get; set; } = 1;

    protected override async Task OnInitializedAsync() {
        client = new ChannelApiClient(Navigator.BaseUri, httpClient);
        channel = await client.GetChannelByIdAsync(Convert.ToInt64(channelId));
        await GetVideosForCurrentPage();
    }

    public async Task GetVideosForCurrentPage() {
        var pagedVideo = await client.GetChannelVideosAsync(channel.Id ?? 0, PageNumber, Limit);
        Videos = pagedVideo.Content;
        Total = pagedVideo.Total;
    }

    public async Task SelectedPageChanged(int pageNumber) {
        PageNumber = pageNumber;
        await GetVideosForCurrentPage();
    }

    public async Task LimitChanged(int limit) {
        Limit = limit;
        await GetVideosForCurrentPage();
    }
}

