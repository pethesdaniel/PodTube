@page "/channel/{channelId}"
@using PodTube.Shared.Models.DTO;
@using PodTube.Client.Components.VideoList
@using PodTube.Client.Components.Common
@using PodTube.Client.Rest;
@inject NavigationManager Navigator
@inject HttpClient httpClient

@if (channel == null) {
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
} else {
    <MudCard Outlined="true">
        <MudCardHeader>
            <MudStack Row=true AlignItems="AlignItems.Center">
                <MudImage Width="500" Src="@channel.Thumbnail"></MudImage>
                <MudStack>
                    <MudText Typo="Typo.h4">@channel.Name</MudText>
                    <MudText Typo="Typo.h5">@channel.Description</MudText>
                    <MudStack Row=true AlignItems="AlignItems.Center">
                        <MudAvatar>
                            <MudImage Src="@channel.Owner.Picture"></MudImage>
                        </MudAvatar>
                        <MudText Typo="Typo.body2">@channel.Owner.Name</MudText>
                    </MudStack>
                </MudStack>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <MudStack>
                <PagedContent @bind-PageNumber="pageNumber" @bind-Limit="limit" Total="total" ContentReady="contentReady"
                          @bind-PageNumber:after="GetVideosForCurrentPage" @bind-Limit:after="GetVideosForCurrentPage">
                    <VideoList Videos="videos" />
                </PagedContent>
            </MudStack>
        </MudCardContent>
    </MudCard>
}


@code {
    [Parameter]
    public string channelId { get; set; } = "";
    private ChannelApiClient? client;

    private ChannelDto? channel;
    private List<VideoDto> videos = new();

    public int pageNumber = 1;
    public int total = 0;
    public int limit = 1;
    public bool contentReady = false;

    protected override async Task OnInitializedAsync() {
        client = new ChannelApiClient(Navigator.BaseUri, httpClient);
        channel = await client.GetChannelByIdAsync(Convert.ToInt64(channelId));
        await GetVideosForCurrentPage();

        contentReady = true;
    }

    public async Task GetVideosForCurrentPage() {
        if(client == null) {
            return;
        }
        var pagedVideo = await client.GetChannelVideosAsync(channel?.Id ?? 0, pageNumber, limit);
        videos = pagedVideo.Content;
        total = pagedVideo.Total;
    }
}

