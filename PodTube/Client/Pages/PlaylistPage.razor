@page "/playlist/{playlistId}"
@using PodTube.Client.Components.Playlists.PlaylistDisplay
@using PodTube.Client.Components.Shared
@using PodTube.Shared.Models.DTO;
@inject NavigationManager Navigator
@inject HttpClient httpClient
@inject RestHelper RestHelper

<MudCard Outlined="true">
    <MudCardHeader>
        @if (playlist != null) {
            <MudStack Row=true AlignItems="AlignItems.Center">
                @if (playlist.Thumbnail != null) {
                    <MudImage Width="250" Height=250 ObjectFit=ObjectFit.Cover Src="@playlist.Thumbnail" Class="rounded-lg"></MudImage>
                } else {
                    <IconHolder Width="250px" Height="250px">
                        <MudIcon Icon="@Icons.Material.Filled.PlaylistPlay" Style="font-size: 4rem;"></MudIcon>
                    </IconHolder>
                }
                <MudStack>
                    <MudText Typo="Typo.h4">@playlist.Name</MudText>
                    <MudText Typo="Typo.h5">@playlist.Description</MudText>
                    <MudStack Row>
                        <MudButton OnClick="DeletePlaylist" Variant="Variant.Filled" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Delete">Delete</MudButton>
                    </MudStack>
                </MudStack>
            </MudStack>
        }
    </MudCardHeader>
    <MudCardContent>
        <MudStack>
            <PlaylistDisplay Playlist="playlist" Videos="videos" VideoReordered="OnVideoReordered" PlayPressed="OnVideoPlayPressed"></PlaylistDisplay>
        </MudStack>
    </MudCardContent>
</MudCard>



@code {
    [Parameter]
    public string playlistId { get; set; } = "";

    private PlaylistDto? playlist;
    private List<VideoDto> videos = new();

    private PlaylistApiClient client;

    protected override async Task OnInitializedAsync() {
        client = new PlaylistApiClient(Navigator.BaseUri, httpClient);
    }

    private async Task OnVideoReordered(PlaylistDisplay.ReorderEvent reorderEvent) {
        if(playlist != null) {
            await client.PostReorderVideoByIdAsync(playlist.Id ?? 0, reorderEvent.VideoId, reorderEvent.Index + 1);
        }

    }

    protected override async Task OnParametersSetAsync() {
        await GetPlaylist();
        await base.OnParametersSetAsync();
    }

    private async Task GetPlaylist() {
        long id = Convert.ToInt64(playlistId);

        await RestHelper.MakeSafeRestCall(
            async () =>
            {
                playlist = await client.GetPlaylistByIdAsync(id);
                var videosPaged = await client.GetPlaylistVideosAsync(id);
                videos.Clear();
                videos.AddRange(videosPaged);
            }
        );
    }

    private async Task DeletePlaylist() {
        long id = Convert.ToInt64(playlistId);

        await RestHelper.MakeSafeRestCall(
            async () => {
                await client.DeletePlaylistByIdAsync(id);
                Navigator.NavigateTo("/channels", forceLoad: true);
            }
        );
    }

    public void OnVideoPlayPressed(long id) {
        Navigator.NavigateTo("/video/" + id);
    }
}
