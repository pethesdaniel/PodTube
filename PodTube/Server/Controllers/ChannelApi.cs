/*
 * PodTube - OpenAPI 3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using PodTube.Attributes;

using Microsoft.AspNetCore.Authorization;
using PodTube.Shared.Models;
using PodTube.BLL.Services;

namespace PodTube.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ChannelApiController : ControllerBase
    {
        private ChannelService ChannelService { get; set; }
        public ChannelApiController(ChannelService channelService) : base() {
            this.ChannelService = channelService;
        }
        /*/// <summary>
        /// Deletes a channel and all of it&#x27;s videos
        /// </summary>
        /// <param name="channelId">ID of channel to delete</param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">Video not found</response>
        /// <response code="405">Validation exception</response>
        [HttpDelete]
        [Route("/channel/{channelId}")]
        [ValidateModelState]
        [SwaggerOperation("ChannelChannelIdDelete")]
        public virtual IActionResult ChannelChannelIdDelete([FromRoute][Required]long? channelId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);

            throw new NotImplementedException();
        }*/

        /// <summary>
        /// Get metadata of a channel
        /// </summary>
        /// <param name="channelId">ID of channel to return</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Channel not found</response>
        /// <response code="405">Validation exception</response>
        [HttpGet]
        [Route("/channel/{channelId}")]
        [ValidateModelState]
        [SwaggerOperation("ChannelChannelIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ChannelInfoWithOwner), description: "Successful operation")]
        public virtual IActionResult ChannelChannelIdGet([FromRoute][Required]long channelId)
        {
            var result = ChannelService.GetChannelById(channelId);

            if(result == null) {
                return StatusCode(404);
            }

            return new ObjectResult(result.ToJson());
        }

        /// <summary>
        /// Get videos uploaded to a channel
        /// </summary>
        /// <param name="channelId">ID of channel to return</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Channel not found</response>
        /// <response code="405">Validation exception</response>
        [HttpGet]
        [Route("/channel/{channelId}/videos")]
        [ValidateModelState]
        [SwaggerOperation("ChannelChannelIdVideosGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(FullChannelInfo), description: "Successful operation")]
        public virtual IActionResult ChannelChannelIdVideosGet([FromRoute][Required]long channelId)
        {
            var result = ChannelService.GetFullChannelById(channelId);

            if (result == null) {
                return StatusCode(404);
            }

            return new ObjectResult(result.ToJson());
        }

        /// <summary>
        /// Get a paged list of all channels
        /// </summary>
        /// <param name="page">Number of the currentpage</param>
        /// <param name="limit">Number of channels on a page</param>
        /// <response code="200">Successful operation</response>
        /// <response code="405">Validation exception</response>
        [HttpGet]
        [Route("/channel")]
        [ValidateModelState]
        [SwaggerOperation("ChannelGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PagedChannelList), description: "Successful operation")]
        public virtual IActionResult ChannelGet([FromQuery][Required()]int page, [FromQuery][Required()]int limit)
        {
            var result = ChannelService.GetChannelsPaged(page, limit);

            if (result == null) {
                return StatusCode(404);
            }

            return new ObjectResult(result.ToJson());
        }

        /*/// <summary>
        /// Create a new channel
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/channel")]
        [ValidateModelState]
        [SwaggerOperation("ChannelPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ChannelInfoWithOwner), description: "Successful operation")]
        public virtual IActionResult ChannelPost([FromBody]ChannelInfo body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ChannelInfoWithOwner));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ChannelInfoWithOwner>(exampleJson)
                        : default(ChannelInfoWithOwner);            //TODO: Change the data returned
            return new ObjectResult(example);
        }*/
    }
}
