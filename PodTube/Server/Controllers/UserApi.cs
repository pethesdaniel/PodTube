/*
 * PodTube - OpenAPI 3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using PodTube.Attributes;

using Microsoft.AspNetCore.Authorization;
using PodTube.BLL.Services;
using PodTube.Shared.Models.DTO;

namespace PodTube.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    [Route("api/user")]
    public class UserApiController : ControllerBase
    {
        private UserService UserService { get; set; }
        public UserApiController(UserService userService) : base() {
            this.UserService = userService;
        }

        /*/// <summary>
        /// Get a paged list of the users favorite channels
        /// </summary>
        /// <param name="userId">ID of User to return</param>
        /// <param name="page">Number of the currentpage</param>
        /// <param name="limit">Number of channels on a page</param>
        /// <response code="200">Successful operation</response>
        /// <response code="405">Validation exception</response>
        [HttpGet]
        [Route("/user/{userId}/favorites")]
        [ValidateModelState]
        [SwaggerOperation(OperationId = "UserUserIdFavoritesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PagedChannelList), description: "Successful operation")]
        public virtual IActionResult UserUserIdFavoritesGet([FromRoute][Required]long? userId, [FromQuery][Required()]long? page, [FromQuery][Required()]long? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PagedChannelList));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 50,\n  \"channels\" : [ {\n    \"cover\" : \"https://example.com/podcast/cover.png\",\n    \"name\" : \"The Podcast\",\n    \"description\" : \"This is the description for the channel.\",\n    \"id\" : 11\n  }, {\n    \"cover\" : \"https://example.com/podcast/cover.png\",\n    \"name\" : \"The Podcast\",\n    \"description\" : \"This is the description for the channel.\",\n    \"id\" : 11\n  } ],\n  \"limit\" : 1,\n  \"page\" : 1\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PagedChannelList>(exampleJson)
                        : default(PagedChannelList);            //TODO: Change the data returned
            return new ObjectResult(example);
        }*/

        /// <summary>
        /// Get information of a User
        /// </summary>
        /// <param name="userId">ID of User to return</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Video not found</response>
        /// <response code="405">Validation exception</response>
        [HttpGet("{userId}")]
        [ValidateModelState]
        [SwaggerOperation(OperationId = "GetUserById")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserDto), description: "Successful operation")]
        public virtual IActionResult GetUserById([FromRoute][Required]long userId)
        {
            var result = UserService.GetUserById(userId);

            if (result == null) {
                return StatusCode(404);
            }

            return new ObjectResult(result);
        }

       /*/// <summary>
        /// Get a paged list of the users playlists
        /// </summary>
        /// <param name="userId">ID of User to return</param>
        /// <param name="page">Number of the currentpage</param>
        /// <param name="limit">Number of playlists on a page</param>
        /// <response code="200">Successful operation</response>
        /// <response code="405">Validation exception</response>
        [HttpGet]
        [Route("/user/{userId}/playlists")]
        [ValidateModelState]
        [SwaggerOperation(OperationId = "UserUserIdPlaylistsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PagedPlaylistList), description: "Successful operation")]
        public virtual IActionResult UserUserIdPlaylistsGet([FromRoute][Required]long? userId, [FromQuery][Required()]long? page, [FromQuery][Required()]long? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PagedPlaylistList));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 50,\n  \"limit\" : 1,\n  \"playlists\" : [ {\n    \"cover\" : \"https://example.com/playlists/100/cover.png\",\n    \"name\" : \"My Playlist vol.1\",\n    \"description\" : \"This is the description for the playlist.\",\n    \"id\" : 100\n  }, {\n    \"cover\" : \"https://example.com/playlists/100/cover.png\",\n    \"name\" : \"My Playlist vol.1\",\n    \"description\" : \"This is the description for the playlist.\",\n    \"id\" : 100\n  } ],\n  \"page\" : 1\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PagedPlaylistList>(exampleJson)
                        : default(PagedPlaylistList);            //TODO: Change the data returned
            return new ObjectResult(example);
        }*/
    }
}
