/*
 * PodTube - OpenAPI 3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using PodTube.Attributes;

using Microsoft.AspNetCore.Authorization;
using PodTube.Shared.Models;
using PodTube.BLL.Services;

namespace PodTube.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VideoApiController : ControllerBase
    { 
        private VideoService VideoService { get; set; }
        public VideoApiController(VideoService videoService) : base() {
            this.VideoService = videoService;
        }

        [HttpGet]
        [Route("/video")]
        [ValidateModelState]
        [SwaggerOperation("VideoGet")]
        [SwaggerResponse(statusCode: 200, description: "Successful operation")]
        public virtual IActionResult VideoGet() {
            var result = VideoService.GetAllVideos();
            return new ObjectResult(result);
        }

        ///// <summary>
        ///// Upload a video
        ///// </summary>
        ///// <param name="body"></param>
        ///// <response code="200">Successful operation</response>
        ///// <response code="405">Invalid input</response>
        //[HttpPost]
        //[Route("/video")]
        //[ValidateModelState]
        //[SwaggerOperation("VideoPost")]
        //[SwaggerResponse(statusCode: 200, type: typeof(VideoInfo), description: "Successful operation")]
        //public virtual IActionResult VideoPost([FromBody]VideoRequestBody body)
        //{ 
        //    //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        //    // return StatusCode(200, default(VideoInfo));

        //    //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        //    // return StatusCode(405);
        //    string exampleJson = null;
        //    exampleJson = "{\n  \"cover\" : \"https://example.com/podcast/episode1/cover.png\",\n  \"name\" : \"The Podcast: Episode 1\",\n  \"description\" : \"This is the description for the episode.\",\n  \"id\" : 10\n}";
            
        //                var example = exampleJson != null
        //                ? JsonConvert.DeserializeObject<VideoInfo>(exampleJson)
        //                : default(VideoInfo);            //TODO: Change the data returned
        //    return new ObjectResult(example);
        //}

        ///// <summary>
        ///// Deletes a video
        ///// </summary>
        ///// <param name="videoId">ID of video to return</param>
        ///// <response code="200">Successful operation</response>
        ///// <response code="404">Video not found</response>
        ///// <response code="405">Validation exception</response>
        //[HttpDelete]
        //[Route("/video/{videoId}")]
        //[ValidateModelState]
        //[SwaggerOperation("VideoVideoIdDelete")]
        //public virtual IActionResult VideoVideoIdDelete([FromRoute][Required]long? videoId)
        //{ 
        //    //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        //    // return StatusCode(200);

        //    //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        //    // return StatusCode(404);

        //    //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        //    // return StatusCode(405);

        //    throw new NotImplementedException();
        //}

        ///// <summary>
        ///// Get information and content of a video
        ///// </summary>
        ///// <param name="videoId">ID of video to return</param>
        ///// <response code="200">Successful operation</response>
        ///// <response code="400">Invalid ID supplied</response>
        ///// <response code="404">Video not found</response>
        ///// <response code="405">Validation exception</response>
        [HttpGet]
        [Route("/video/{videoId}")]
        [ValidateModelState]
        [SwaggerOperation("VideoVideoIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(VideoDto), description: "Successful operation")]
        public virtual IActionResult VideoVideoIdGet([FromRoute][Required]long videoId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FullVideoInfo));
            var result = VideoService.GetVideoById(videoId);

            if(result == null) {
                return StatusCode(404);
            }

            return new ObjectResult(result.ToJson());
        }
    }
}
