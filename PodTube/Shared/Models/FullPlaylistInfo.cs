/*
 * PodTube - OpenAPI 3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace PodTube.Shared.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FullPlaylistInfo : IEquatable<FullPlaylistInfo>
    { 
        /// <summary>
        /// Gets or Sets PlaylistInfo
        /// </summary>

        [DataMember(Name="playlistInfo")]
        public PlaylistInfoWithOwner PlaylistInfo { get; set; }

        /// <summary>
        /// Gets or Sets Videos
        /// </summary>

        [DataMember(Name="videos")]
        public List<VideoInfo> Videos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FullPlaylistInfo {\n");
            sb.Append("  PlaylistInfo: ").Append(PlaylistInfo).Append("\n");
            sb.Append("  Videos: ").Append(Videos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FullPlaylistInfo)obj);
        }

        /// <summary>
        /// Returns true if FullPlaylistInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of FullPlaylistInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FullPlaylistInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PlaylistInfo == other.PlaylistInfo ||
                    PlaylistInfo != null &&
                    PlaylistInfo.Equals(other.PlaylistInfo)
                ) && 
                (
                    Videos == other.Videos ||
                    Videos != null &&
                    Videos.SequenceEqual(other.Videos)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PlaylistInfo != null)
                    hashCode = hashCode * 59 + PlaylistInfo.GetHashCode();
                    if (Videos != null)
                    hashCode = hashCode * 59 + Videos.GetHashCode();
                return hashCode;
            }
        }
    }
}
