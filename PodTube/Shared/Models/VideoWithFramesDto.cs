/*
 * PodTube - OpenAPI 3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace PodTube.Shared.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VideoWithFramesDto : IEquatable<VideoWithFramesDto>
    { 
        /// <summary>
        /// Gets or Sets VideoInfo
        /// </summary>

        [DataMember(Name="videoInfo")]
        public VideoDto VideoInfo { get; set; }

        /// <summary>
        /// Gets or Sets Frames
        /// </summary>
        [Required]

        [DataMember(Name="frames")]
        public List<FrameDto> Frames { get; set; }

        /// <summary>
        /// Gets or Sets Audio
        /// </summary>
        [Required]

        [DataMember(Name="audio")]
        public List<string> Audio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FullVideoInfo {\n");
            sb.Append("  VideoInfo: ").Append(VideoInfo).Append("\n");
            sb.Append("  Frames: ").Append(Frames).Append("\n");
            sb.Append("  Audio: ").Append(Audio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VideoWithFramesDto)obj);
        }

        /// <summary>
        /// Returns true if FullVideoInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of FullVideoInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoWithFramesDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VideoInfo == other.VideoInfo ||
                    VideoInfo != null &&
                    VideoInfo.Equals(other.VideoInfo)
                ) && 
                (
                    Frames == other.Frames ||
                    Frames != null &&
                    Frames.SequenceEqual(other.Frames)
                ) && 
                (
                    Audio == other.Audio ||
                    Audio != null &&
                    Audio.Equals(other.Audio)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VideoInfo != null)
                    hashCode = hashCode * 59 + VideoInfo.GetHashCode();
                    if (Frames != null)
                    hashCode = hashCode * 59 + Frames.GetHashCode();
                    if (Audio != null)
                    hashCode = hashCode * 59 + Audio.GetHashCode();
                return hashCode;
            }
        }
    }
}
